const jwt = require("jsonwebtoken")
const User = require("../models/User")

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const activeUsers = new Map()
const userSessions = new Map()

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const authenticateSocket = async (socket, next) => {
  try {
    const token = socket.handshake.auth.token

    if (!token) {
      return next(new Error("–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"))
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET)
    const user = await User.findById(decoded.id).select("-password")

    if (!user || !user.isActive) {
      return next(new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"))
    }

    socket.user = user
    next()
  } catch (error) {
    next(new Error("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"))
  }
}

const socketHandler = (io) => {
  // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  io.use(authenticateSocket)

  io.on("connection", (socket) => {
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω: ${socket.user.name} (${socket.user.email})`)

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    activeUsers.set(socket.user.id, {
      id: socket.user.id,
      name: socket.user.name,
      email: socket.user.email,
      avatar: socket.user.avatar,
      socketId: socket.id,
      connectedAt: new Date(),
      status: "online",
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!userSessions.has(socket.user.id)) {
      userSessions.set(socket.user.id, new Set())
    }
    userSessions.get(socket.user.id).add(socket.id)

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
    socket.join(`user_${socket.user.id}`)

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    socket.broadcast.emit("userConnected", {
      user: activeUsers.get(socket.user.id),
      timestamp: new Date(),
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–æ–≤–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
    socket.emit("activeUsers", Array.from(activeUsers.values()))

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –∑–∞–¥–∞—á–∏
    socket.on("joinTaskRoom", (taskId) => {
      socket.join(`task_${taskId}`)
      console.log(`üìã ${socket.user.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∑–∞–¥–∞—á–µ ${taskId}`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
      socket.to(`task_${taskId}`).emit("userJoinedTask", {
        user: activeUsers.get(socket.user.id),
        taskId,
        timestamp: new Date(),
      })
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∏–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –∑–∞–¥–∞—á–∏
    socket.on("leaveTaskRoom", (taskId) => {
      socket.leave(`task_${taskId}`)
      console.log(`üìã ${socket.user.name} –ø–æ–∫–∏–Ω—É–ª –∑–∞–¥–∞—á—É ${taskId}`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
      socket.to(`task_${taskId}`).emit("userLeftTask", {
        user: activeUsers.get(socket.user.id),
        taskId,
        timestamp: new Date(),
      })
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–¥–∞—á –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    socket.on("taskUpdate", (data) => {
      const { taskId, changes, type } = data

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!taskId || !changes || !type) {
        socket.emit("error", { message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏" })
        return
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã –∑–∞–¥–∞—á–∏
      socket.to(`task_${taskId}`).emit("taskUpdated", {
        taskId,
        changes,
        type,
        updatedBy: {
          id: socket.user.id,
          name: socket.user.name,
          avatar: socket.user.avatar,
        },
        timestamp: new Date(),
      })

      console.log(`üìù ${socket.user.name} –æ–±–Ω–æ–≤–∏–ª –∑–∞–¥–∞—á—É ${taskId}: ${type}`)
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞–¥–∞—á–∞–º
    socket.on("addComment", (data) => {
      const { taskId, comment } = data

      if (!taskId || !comment || !comment.trim()) {
        socket.emit("error", { message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" })
        return
      }

      const commentData = {
        id: Date.now().toString(),
        text: comment.trim(),
        user: {
          id: socket.user.id,
          name: socket.user.name,
          avatar: socket.user.avatar,
        },
        createdAt: new Date(),
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã –∑–∞–¥–∞—á–∏
      io.to(`task_${taskId}`).emit("newComment", {
        taskId,
        comment: commentData,
      })

      console.log(`üí¨ ${socket.user.name} –¥–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ ${taskId}`)
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    socket.on("typing", (data) => {
      const { taskId, isTyping } = data

      socket.to(`task_${taskId}`).emit("userTyping", {
        user: {
          id: socket.user.id,
          name: socket.user.name,
        },
        taskId,
        isTyping,
        timestamp: new Date(),
      })
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on("updateStatus", (status) => {
      const validStatuses = ["online", "away", "busy", "offline"]

      if (!validStatuses.includes(status)) {
        socket.emit("error", { message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å" })
        return
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      if (activeUsers.has(socket.user.id)) {
        activeUsers.get(socket.user.id).status = status

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        socket.broadcast.emit("userStatusChanged", {
          userId: socket.user.id,
          status,
          timestamp: new Date(),
        })
      }
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on("disconnect", (reason) => {
      console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω: ${socket.user.name} (${reason})`)

      // –£–¥–∞–ª—è–µ–º —Å–æ–∫–µ—Ç –∏–∑ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userSessions.has(socket.user.id)) {
        userSessions.get(socket.user.id).delete(socket.id)

        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        if (userSessions.get(socket.user.id).size === 0) {
          userSessions.delete(socket.user.id)
          activeUsers.delete(socket.user.id)

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          socket.broadcast.emit("userDisconnected", {
            userId: socket.user.id,
            timestamp: new Date(),
          })
        }
      }
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
    socket.on("error", (error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞ –¥–ª—è ${socket.user.name}:`, error)
    })
  })

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  setInterval(
    () => {
      const now = new Date()
      const timeout = 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç

      for (const [userId, userData] of activeUsers.entries()) {
        if (now - userData.connectedAt > timeout) {
          activeUsers.delete(userId)
          userSessions.delete(userId)

          io.emit("userDisconnected", {
            userId,
            timestamp: now,
            reason: "timeout",
          })
        }
      }
    },
    5 * 60 * 1000,
  ) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
}

module.exports = socketHandler
